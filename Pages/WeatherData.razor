@page "/weather"

@inject IHttpClientFactory _clientFactory

<h3>Weather Data</h3>

@code {
    WeatherForecastModel forecast;
    string errorString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        /*
        var request = new HttpRequestMessage(HttpMethod.Get, "https://www.metaweather.com/api/location/2487610/");

        var client = _clientFactory.CreateClient();

        HttpResponseMessage response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
            forecast = await response.Content.ReadFromJsonAsync<WeatherForecastModel>();
        errorString = null;
            }
            else
            {
            errorString = $"There was an error retreiving forecast: {response.ReasonPhrase}";
        }*/

        var client = _clientFactory.CreateClient("meta");
        try
        {
            forecast = await client.GetFromJsonAsync<WeatherForecastModel>("location/2487610/");
        }
        catch(Exception ex)
        {
            errorString = $"There was an error retreiving forecast: {ex.Message}";
        }
    }
}

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2">@errorString</div>
}
else if (forecast is null)
{
    <div class="h4">Loading ...</div>
}
else
{
    <table class="table table-striped">        
        <thead class="table-dark">
            <tr>
                <th>Date</th>
                <th>Weather State</th>
                <th>Low</th>
                <th>High</th>
                <th>Temperature</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var w in forecast.consolidated_weather)
            {
                <tr>
                    <td>@w.applicable_date</td>
                    <td>@w.weather_state_name</td>
                    <td>@w.min_temp</td>
                    <td>@w.max_temp</td>
                    <td>@w.the_temp</td>
                </tr>
            }
        </tbody>
    </table>
}